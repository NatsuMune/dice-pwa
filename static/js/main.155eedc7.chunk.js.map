{"version":3,"sources":["HomePage.js","Wind.js","dealer.png","arrow.svg","CardPicking.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["HomePage","props","className","onClick","window","location","replace","Wind","useState","rollCount","setRollCount","buttonShow","setButtonShow","diceRef","setDiceRef","results","setResults","largestIndex","setLargestIndex","rollRound","setRollRound","numDice","rollDone","num","newResults","prev","_","countBy","max","index","findIndex","result","dieSize","faceColor","dotColor","rollTime","disableIndividual","defaultRoll","ref","dice","maxCount","setTimeout","rollAll","style","position","left","top","visibility","transform","map","backgroundColor","Cardpicking","firstRoll","setFirstRoll","secondRoll","setSecondRoll","dragonRoll","setDragonRoll","direction","setDirection","pickcardStartPoint","setPickcardStartPoint","clearResult","getPhrase","d","pickCardPhrase","rightHandPhrase","leftHandPhrase","fromRight","fontSize","textDecorationLine","textDecorationThickness","textUnderlineOffset","fromLeft","pickDirection","pickFromRight","total","num1","parseInt","prompt","num2","id","src","dealer","alt","arrow","routes","App","useRoutes","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","scrollPosition","$body","document","querySelector","pageYOffset","overflow","width","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.155eedc7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction HomePage(props) {\n    return <div className=\"HomePage\">\n        <h1>请选择阶段</h1>\n        <button className=\"button\" onClick={() => window.location.replace('/wind')}>打风头</button>\n        <button className=\"button\" onClick={() => window.location.replace('/pick')}>开门儿</button>\n    </div>\n}\n\nHomePage.propTypes = {\n\n}\n\nexport default HomePage\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDice from 'react-dice-complete'\nimport _ from 'lodash'\n\nfunction Wind(props) {\n    const [rollCount, setRollCount] = useState(0);\n    const [buttonShow, setButtonShow] = useState(true);\n    const [diceRef, setDiceRef] = useState(null);\n    const [results, setResults] = useState([]);\n    const [largestIndex, setLargestIndex] = useState(-1);\n    const [rollRound, setRollRound] = useState(4);\n\n    function rollDoneCallback(num) {\n        let newResults;\n        setResults((prev) => {\n            newResults = [...prev, num];\n            return newResults\n        });\n        if (rollCount === rollRound) {\n            // Log largest roll number\n            const maxCount = _.countBy(newResults)[_.max(newResults)];\n            if (maxCount === 1) {\n                const index = _.findIndex(newResults, (result) => result === _.max(newResults));\n                setLargestIndex(index);\n            }\n        }\n    }\n\n    function rollIt() {\n        if (rollCount === rollRound) {\n            const maxCount = _.countBy(results)[_.max(results)];\n            if (maxCount === 1) {\n                window.location.replace('/pick');\n            } else {\n                setLargestIndex(-1);\n                setRollCount(0);\n                setResults([]);\n                setRollRound(maxCount);\n            }\n        } else {\n            setButtonShow(false);\n            setTimeout(() => setButtonShow(true), 500);\n            diceRef?.rollAll();\n            setRollCount((prev) => prev + 1);\n        }\n    }\n\n    return (\n        <div className=\"Wind\">\n            <ReactDice\n                numDice={2}\n                rollDone={rollDoneCallback}\n                dieSize={80}\n                faceColor=\"white\"\n                dotColor=\"red\"\n                rollTime={0.5}\n                disableIndividual={true}\n                defaultRoll={12}\n                ref={dice => setDiceRef(dice)}></ReactDice>\n            <button className=\"button\"\n                onClick={rollIt}\n                style={{\n                    position: 'absolute',\n                    left: '50%',\n                    top: '50%',\n                    visibility: buttonShow ? 'unset' : 'hidden',\n                    transform: `translate(-50%, -50%)`\n                }}>{largestIndex === -1 ? rollCount === rollRound ? \"决斗\" : \"掷骰子\" : \"开门儿\"}</button>\n            <table>\n                <thead>\n                    <tr>\n                        <th>序号</th>\n                        <th>大小</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {results.map((result, index) =>\n                        <tr key={index} style={index === largestIndex ? { backgroundColor: 'lightgreen' } : null}>\n                            <td>{index + 1}</td>\n                            <td>{result}</td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nWind.propTypes = {\n\n}\n\nexport default Wind\n","export default __webpack_public_path__ + \"static/media/dealer.79936c5b.png\";","export default __webpack_public_path__ + \"static/media/arrow.e4fefebb.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport dealer from './dealer.png';\nimport arrow from './arrow.svg';\nimport ReactDice from 'react-dice-complete'\nimport { useState } from 'react';\n\n\nfunction Cardpicking(props) {\n    const [firstRoll, setFirstRoll] = useState(null);\n    const [secondRoll, setSecondRoll] = useState(null);\n    const [dragonRoll, setDragonRoll] = useState(null);\n    const [direction, setDirection] = useState(0);  // 0,1,2,3\n    const [pickcardStartPoint, setPickcardStartPoint] = useState(null);\n    const [buttonShow, setButtonShow] = useState(true);\n\n    let diceRef = {};\n\n    function rollDoneCallback(num) {\n        if (!firstRoll) {\n            // if it's the first roll\n            setFirstRoll(num);\n            const nextDirection = (num - 1) % 4;\n            setDirection(nextDirection);  // Set direction for next player to roll\n        } else if (!secondRoll) {\n            // if it's the second roll\n            setSecondRoll(num);\n            const total = firstRoll + num;\n            let pickDirection = total < 17 ? direction : direction - 1;\n            pickDirection = (pickDirection + 4) % 4;\n            setPickcardStartPoint({\n                direction: pickDirection,\n                fromRight: total < 17 ? total : total - 17\n            });\n            setDirection(2);  // Set direction for opposite player to roll dragon\n        } else if (!dragonRoll) {\n            setDragonRoll(num);\n            let pickDirection = pickcardStartPoint.direction;\n            let pickFromRight = pickcardStartPoint.fromRight;\n            if (num <= pickFromRight) {\n                setPickcardStartPoint({\n                    direction: pickDirection,\n                    fromRight: pickFromRight - num + 1,\n                    fromLeft: num\n                });\n            } else {\n                setPickcardStartPoint({\n                    direction: (pickDirection + 1) % 4,\n                    fromRight: 17 - (num - pickFromRight) + 1,\n                    fromLeft: num - pickFromRight\n                });\n            }\n\n            setDirection(0);  // Set direction for opposite player to roll dragon\n        } else {\n            // if it's after the second roll\n            clearResult();\n        }\n    }\n\n    function rollIt() {\n        if (dragonRoll) {\n            clearResult();\n        } else {\n            setButtonShow(false);\n            setTimeout(() => setButtonShow(true), 500);\n            const num1 = parseInt(prompt());\n            const num2 = parseInt(prompt());\n            diceRef.rollAll([num1, num2]);\n        }\n    }\n\n    function clearResult() {\n        setFirstRoll(null);\n        setSecondRoll(null);\n        setDragonRoll(null);\n        setPickcardStartPoint(null);\n    }\n\n    function getPhrase(d) {\n        let result;\n        if (!firstRoll) {\n            result = d === 0 ? \"请掷骰子\" : null;\n        } else if (!secondRoll) {\n            result = <span>第一次：{firstRoll}</span>\n        } else if (!dragonRoll && pickcardStartPoint) {\n            let pickCardPhrase;\n            if (d === 0) {\n                let rightHandPhrase = \"右侧\";\n                let leftHandPhrase = \"左侧\";\n                switch (pickcardStartPoint.direction) {\n                    case 1:\n                        rightHandPhrase = \"远端\";\n                        leftHandPhrase = \"近端\";\n                        break;\n                    case 2:\n                        rightHandPhrase = \"左侧\";\n                        leftHandPhrase = \"右侧\";\n                        break;\n                    case 3:\n                        rightHandPhrase = \"近端\";\n                        leftHandPhrase = \"远端\";\n                        break;\n                    default:\n                        break;\n                }\n                if (pickcardStartPoint.fromRight <= 8) {\n                    if (pickcardStartPoint.fromRight === 0) {\n                        pickCardPhrase = `抓牌：从${rightHandPhrase}起抓`;\n                    } else {\n                        pickCardPhrase = `抓牌：从${rightHandPhrase}起留 ` + pickcardStartPoint.fromRight + \" 张\";\n                    }\n                } else {\n                    pickCardPhrase = `抓牌：从${leftHandPhrase}起抓 ` + (17 - pickcardStartPoint.fromRight) + \" 张\";\n                }\n            }\n            result = <span> {pickCardPhrase ? <span>{pickCardPhrase} <br /></span> : null}\n        点数：{firstRoll} + {secondRoll} = <span style={{ fontSize: 60, textDecorationLine: 'underline', textDecorationThickness: 3, textUnderlineOffset: 7 }}>{firstRoll + secondRoll}</span>\n            </span>\n        } else if (pickcardStartPoint) {\n            // 打混儿阶段\n            let rightHandPhrase = \"右侧\";\n            let leftHandPhrase = \"左侧\";\n            switch ((pickcardStartPoint.direction - d + 4) % 4) {\n                case 1:\n                    rightHandPhrase = \"远端\";\n                    leftHandPhrase = \"近端\";\n                    break;\n                case 2:\n                    rightHandPhrase = \"左侧\";\n                    leftHandPhrase = \"右侧\";\n                    break;\n                case 3:\n                    rightHandPhrase = \"近端\";\n                    leftHandPhrase = \"远端\";\n                    break;\n                default:\n                    break;\n            }\n            if (pickcardStartPoint.fromRight < pickcardStartPoint.fromLeft) {\n                result = `混儿：从${rightHandPhrase}起第 ${pickcardStartPoint.fromRight} 张`;\n            } else if (pickcardStartPoint.fromRight > pickcardStartPoint.fromLeft) {\n                result = `混儿：从${leftHandPhrase}起第 ${pickcardStartPoint.fromLeft} 张`;\n            } else {\n                result = `混儿：第 ${pickcardStartPoint.fromRight} 张`\n            }\n        }\n        return result;\n    }\n\n    return (\n        <div className=\"CardPicking\">\n            <ReactDice numDice={2}\n                rollDone={rollDoneCallback}\n                dieSize={80}\n                faceColor=\"white\"\n                dotColor=\"red\"\n                rollTime={0.5}\n                disableIndividual={true}\n                defaultRoll={12}\n                ref={dice => diceRef = dice}></ReactDice>\n            <div>\n                <button className=\"button\"\n                    onClick={rollIt}\n                    style={{\n                        position: 'absolute',\n                        left: '50%',\n                        top: '50%',\n                        visibility: buttonShow ? 'unset' : 'hidden',\n                        transform: `translate(-50%, -50%) rotate(${-direction * 90}deg)`\n                    }}>{!secondRoll ? \"掷骰子\" : !dragonRoll ? \"打混儿\" : \"再来一局\"}</button>\n            </div>\n            <div></div>\n            <div id=\"p0\" className=\"result\">{getPhrase(0)}</div>\n            <div id=\"p1\" className=\"result\">{getPhrase(1)}</div>\n            <div id=\"p2\" className=\"result\">{getPhrase(2)}</div>\n            <div id=\"p3\" className=\"result\">{getPhrase(3)}</div>\n            <div><img src={dealer} id=\"dealer\" alt=\"dealer\" /></div>\n            <div><img src={arrow} id=\"arrow\" alt=\"arrow\" style={{\n                visibility: pickcardStartPoint ? 'unset' : 'hidden',\n                transform: `translate(-50%, -50%) rotate(${-pickcardStartPoint?.direction * 90}deg)`\n            }} /></div>\n        </div>\n    );\n}\n\nCardpicking.propTypes = {\n\n}\n\nexport default Cardpicking\n","import './App.scss';\nimport 'react-dice-complete/dist/react-dice-complete.css'\nimport { useRoutes } from 'hookrouter';\n\nimport Homepage from './HomePage';\nimport Wind from './Wind';\nimport Cardpicking from './CardPicking';\n\nconst routes = {\n  '/wind': () => <Wind />,\n  '/pick': () => <Cardpicking />\n}\n\nfunction App() {\n  return useRoutes(routes) || <Homepage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst $body = document.querySelector('body');\nlet scrollPosition = 0;\nscrollPosition = window.pageYOffset;\n$body.style.overflow = 'hidden';\n$body.style.position = 'fixed';\n$body.style.top = `-${scrollPosition}px`;\n$body.style.width = '100%';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}