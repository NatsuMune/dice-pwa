{"version":3,"sources":["dealer.png","arrow.svg","App.js","serviceWorkerRegistration.js","index.js"],"names":["App","useState","firstRoll","setFirstRoll","secondRoll","setSecondRoll","dragonRoll","setDragonRoll","direction","setDirection","pickcardStartPoint","setPickcardStartPoint","buttonShow","setButtonShow","diceRef","clearResult","getPhrase","d","result","pickCardPhrase","rightHandPhrase","leftHandPhrase","fromRight","fromLeft","className","numDice","rollDone","num","pickDirection","pickFromRight","total","dieSize","faceColor","dotColor","rollTime","disableIndividual","defaultRoll","ref","dice","onClick","setTimeout","rollAll","style","position","left","top","visibility","transform","id","src","dealer","alt","arrow","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","scrollPosition","$body","document","querySelector","pageYOffset","overflow","width","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.75e6eff7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/dealer.79936c5b.png\";","export default __webpack_public_path__ + \"static/media/arrow.e4fefebb.svg\";","import './App.css';\nimport ReactDice from 'react-dice-complete'\nimport 'react-dice-complete/dist/react-dice-complete.css'\nimport { useState } from 'react';\nimport dealer from './dealer.png';\nimport arrow from './arrow.svg';\n\n\nfunction App() {\n  const [firstRoll, setFirstRoll] = useState(null);\n  const [secondRoll, setSecondRoll] = useState(null);\n  const [dragonRoll, setDragonRoll] = useState(null);\n  const [direction, setDirection] = useState(0);  // 0,1,2,3\n  const [pickcardStartPoint, setPickcardStartPoint] = useState(null);\n  const [buttonShow, setButtonShow] = useState(true);\n\n  let diceRef = {};\n\n  function rollDoneCallback(num) {\n    if (!firstRoll) {\n      // if it's the first roll\n      setFirstRoll(num);\n      const nextDirection = (num - 1) % 4;\n      setDirection(nextDirection);  // Set direction for next player to roll\n    } else if (!secondRoll) {\n      // if it's the second roll\n      setSecondRoll(num);\n      const total = firstRoll + num;\n      setPickcardStartPoint({\n        direction: total < 17 ? direction : direction - 1,\n        fromRight: total < 17 ? total : total - 17\n      });\n      setDirection(2);  // Set direction for opposite player to roll dragon\n    } else if (!dragonRoll) {\n      setDragonRoll(num);\n      let pickDirection = pickcardStartPoint.direction;\n      let pickFromRight = pickcardStartPoint.fromRight;\n      if (num <= pickFromRight) {\n        setPickcardStartPoint({\n          direction: pickDirection,\n          fromRight: pickFromRight - num + 1,\n          fromLeft: num\n        });\n      } else {\n        setPickcardStartPoint({\n          direction: pickDirection === 3 ? 0 : pickDirection + 1,\n          fromRight: 17 - (num - pickFromRight) + 1,\n          fromLeft: num - pickFromRight\n        });\n      }\n\n      setDirection(0);  // Set direction for opposite player to roll dragon\n    } else {\n      // if it's after the second roll\n      clearResult();\n    }\n  }\n\n  function rollIt() {\n    if (dragonRoll) {\n      clearResult();\n    } else {\n      setButtonShow(false);\n      setTimeout(() => setButtonShow(true), 500);\n      diceRef.rollAll();\n    }\n  }\n\n  function clearResult() {\n    setFirstRoll(null);\n    setSecondRoll(null);\n    setDragonRoll(null);\n    setPickcardStartPoint(null);\n  }\n\n  function getPhrase(d) {\n    let result;\n    if (!firstRoll) {\n      result = d === 0 ? \"请掷骰子\" : null;\n    } else if (!secondRoll) {\n      result = <span>第一次：{firstRoll}</span>\n    } else if (!dragonRoll && pickcardStartPoint) {\n      let pickCardPhrase;\n      if (d === 0) {\n        let rightHandPhrase = \"右侧\";\n        let leftHandPhrase = \"左侧\";\n        switch (pickcardStartPoint.direction) {\n          case 1:\n            rightHandPhrase = \"远端\";\n            leftHandPhrase = \"近端\";\n            break;\n          case 2:\n            rightHandPhrase = \"左侧\";\n            leftHandPhrase = \"右侧\";\n            break;\n          case 3:\n            rightHandPhrase = \"近端\";\n            leftHandPhrase = \"远端\";\n            break;\n          default:\n            break;\n        }\n        if (pickcardStartPoint.fromRight <= 8) {\n          if (pickcardStartPoint.fromRight === 0) {\n            pickCardPhrase = `从${rightHandPhrase}起抓`;\n          } else {\n            pickCardPhrase = `从${rightHandPhrase}起留 ` + pickcardStartPoint.fromRight + \" 张\";\n          }\n        } else {\n          pickCardPhrase = `从${leftHandPhrase}起抓 ` + (17 - pickcardStartPoint.fromRight) + \" 张\";\n        }\n      }\n      result = <span> {pickCardPhrase ? <span>{pickCardPhrase} <br /></span> : null}\n        总计：{firstRoll} + {secondRoll} = {firstRoll + secondRoll}\n      </span>\n    } else if (pickcardStartPoint) {\n      // 打混儿阶段\n      let pickCardPhrase;\n      if (d === 0) {\n        let rightHandPhrase = \"右侧\";\n        let leftHandPhrase = \"左侧\";\n        switch (pickcardStartPoint.direction) {\n          case 1:\n            rightHandPhrase = \"远端\";\n            leftHandPhrase = \"近端\";\n            break;\n          case 2:\n            rightHandPhrase = \"左侧\";\n            leftHandPhrase = \"右侧\";\n            break;\n          case 3:\n            rightHandPhrase = \"近端\";\n            leftHandPhrase = \"远端\";\n            break;\n          default:\n            break;\n        }\n        if (pickcardStartPoint.fromRight < pickcardStartPoint.fromLeft) {\n          pickCardPhrase = `混儿：从${rightHandPhrase}起第 ${pickcardStartPoint.fromRight} 张`;\n        } else if (pickcardStartPoint.fromRight > pickcardStartPoint.fromLeft) {\n          pickCardPhrase = `混儿：从${leftHandPhrase}起第 ${pickcardStartPoint.fromLeft} 张`;\n        } else {\n          pickCardPhrase = `混儿：第 ${pickcardStartPoint.fromRight} 张`\n        }\n      }\n      result = <span>总计：{firstRoll} + {secondRoll} = {firstRoll + secondRoll} <br /> {pickCardPhrase}</span>\n    }\n    return result;\n  }\n\n  return (\n    <div className=\"App\">\n      <ReactDice numDice={2}\n        rollDone={rollDoneCallback}\n        dieSize={80}\n        faceColor=\"white\"\n        dotColor=\"red\"\n        rollTime={0.5}\n        disableIndividual={true}\n        defaultRoll={12}\n        ref={dice => diceRef = dice}></ReactDice>\n      <div>\n        <button className=\"button\"\n          onClick={rollIt}\n          style={{\n            position: 'absolute',\n            left: '50%',\n            top: '50%',\n            visibility: buttonShow ? 'unset' : 'hidden',\n            transform: `translate(-50%, -50%) rotate(${-direction * 90}deg)`\n          }}>{!secondRoll ? \"掷骰子\" : !dragonRoll ? \"打混儿\" : \"重来\"}</button>\n      </div>\n      <div></div>\n      <div id=\"p0\" className=\"result\">{getPhrase(0)}</div>\n      <div id=\"p1\" className=\"result\">{getPhrase(1)}</div>\n      <div id=\"p2\" className=\"result\">{getPhrase(2)}</div>\n      <div id=\"p3\" className=\"result\">{getPhrase(3)}</div>\n      <div><img src={dealer} id=\"dealer\" alt=\"dealer\" /></div>\n      <div><img src={arrow} id=\"arrow\" alt=\"arrow\" style={{\n        visibility: pickcardStartPoint ? 'unset' : 'hidden',\n        transform: `translate(-50%, -50%) rotate(${-pickcardStartPoint?.direction * 90}deg)`\n      }} /></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst $body = document.querySelector('body');\nlet scrollPosition = 0;\nscrollPosition = window.pageYOffset;\n$body.style.overflow = 'hidden';\n$body.style.position = 'fixed';\n$body.style.top = `-${scrollPosition}px`;\n$body.style.width = '100%';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}